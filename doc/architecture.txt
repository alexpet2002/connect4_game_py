

    -------------------------
  5 | 0 |   |   |   |   |   |
    -------------------------
  4 | 0 |   |   |   |   |   |
    -------------------------
  3 | 0 | 0 |   |   |   |   |
    -------------------------
  2 | 0 | 0 |   |   |   |   |
    -------------------------
  1 | 0 | 0 | 0 | 0 | 0 | 0 |
    -------------------------
  0 | 1 | 2 | 0 | 0 | 0 | 0 |
    -------------------------
      0   1   2   3   4   5


    -------------------------
5   | 2 | 1 | 1 | 1 | 0 | 0 |
4   | 2 | X | 1 | 0 | 1 | 0 |
3   | 0 | 1 | X | 1 | 1 | 0 |
2   | 0 | 0 | 1 | 0 | 1 | 0 |
1   | 1 | 1 | 0 | 1 | X | 0 |
0   | 0 | 0 | 0 | 1 | 0 | 1 |
    -------------------------
      0   1   2   3   4   5

players_stack1 = [[1, 3], [2, 4]]
players_stack2 = [[1, 3], [2, 4]]



----------------------------------------

  actual_board_is[x][y] =
               [[ 0, 0, 0, 0, 0,],
                [ 0, 0, 0, 0, 0,],
                [ 0, 0, 0, 0, 0,],
                [ 0, 0, 0, 0, 0,],
                [ 0, 0, 0, 0, 0,]]

# Creates a list containing 5 lists, each of 8 items, all set to 0
w, h = 8, 5
Matrix = [[0 for x in range(w)] for y in range(h)]

#You can now add items to the list:

Matrix[0][0] = 1
Matrix[6][0] = 3 # error! range...
Matrix[0][6] = 3 # valid

Note that the matrix is "y" address major, in other words, the "y index" comes before the "x index".

print Matrix[0][0] # prints 1
x, y = 0, 6
print Matrix[x][y] # prints 3; be careful with indexing!

--------------------------------------------------------------------------------



- Definition f array: -> list[list[]] (Matrix)
    - columns
    - rows
    -> add/populate zeros


- display_of_the_array(matrix: list) -> None:
    - for loops:
        - for "each" row print "each" column
        - at the beginning of the row loop, add banner. At the end of "each" row, add a banner
        - at the beginning of column add "|" and after "each" 0 in the column

- display_of_the_board(matrix: list) -> None:
    - for loops:
        - for "each" row print "each" column
        - at the beginning of the row loop, add banner. At the end of "each" row, add a banner
        - at the beginning of column add "|" and after "each" 0 in the column
        - (condition) instead of 0: Blank, 1: X, 2: O.

- players' moves:

    - Define: Turns (bool) : 1 => True (Mark: 1), 2 => False (Mark: 2)
    - Definition 2 players:
        - Define capability of inputs: column -> int(str)
            - out_of_bounds(matrix, column) -> bool:
                - True: all column is taken: -> bool => warn: "can't put anything inside. column full" -> choose other column.
                - False: continue
        - set_the_players_mark(matrix, column) -> list(row: int, col:int):
            - if the row and column is empty -> bool => Mark
            - if the row and column is taken -> bool:
                - check if the row of the column above is taken:
                    no -> MARK
                    yes -> check again...
                    ------
    - conditions_to_stop(matrix, mark) -> bool:
        - all_columns_are_taken(matrix) -> bool: => end of game "nobody won":
        - four_consecutive_marks(matrix, mark) -> bool:
            - check if there are 4 consecutive marks (OR):
                - win_horizontally(matrix, mark) -> bool:
                    - Check if 3 cells below are the same:
                        Check 4 times the four cells relative to chosen one by shifting to the right:
                            -> try: check if 3 cells to the left are same?
                                arr[r][c] == arr[r][c-1] and arr[r][c] == arr[r][c-2] and arr[r][c] == arr[r][c-3]
                            -> try: check if 1 cells to the right and 2 to the left are same?
                                arr[r][c] == arr[r][c+1] and arr[r][c] == arr[r][c-1] and arr[r][c] == arr[r][c-2]
                            -> try: check if 2 cells to the right and 1 to the left are same?
                                arr[r][c] == arr[r][c+2] and arr[r][c] == arr[r][c+1] and arr[r][c] == arr[r][c-1]
                            -> try: check if 3 cells to the right are same? =>
                                arr[r][c] == arr[r][c+3] and arr[r][c] == arr[r][c+2] and arr[r][c] == arr[r][c+1]
                OR
                - win_vertically(matrix, mark) -> bool:
                    - Check if 3 cells below are the same:
                        -> if arr[r][c] == arr[r-1][c] and arr[r][c] == arr[r-2][c] and arr[r][c] == arr[r-3][c]
                        -> True => return True else false
                OR
                - win_diagonally(matrix, mark) -> bool:
                    - check if 3 cells diagonally right and diagonally left are the same:
                        -> win_diagonally_left(matrix, mark) -> bool:
                            try: arr[r][c] == arr[r+1][c+1] and arr[r][c] == arr[r+2][c+2] and arr[r][c] == arr[r+3][c+3]
                            try: arr[r][c] == arr[r-1][c-1] and arr[r][c] == arr[r+1][c+1] and arr[r][c] == arr[r+2][c+2]
                            try: arr[r][c] == arr[r-2][c-2] and arr[r][c] == arr[r-1][c-1] and arr[r][c] == arr[r+1][c+1]
                            try: arr[r][c] == arr[r-3][c-3] and arr[r][c] == arr[r-2][c-2] and arr[r][c] == arr[r-1][c-1]

                        OR
                        -> win_diagonally_right(matrix, mark) -> bool:
                            try: arr[r][c] == arr[r+1][c-1] and arr[r][c] == arr[r+2][c-2] and arr[r][c] == arr[r+3][c-3]
                            try: arr[r][c] == arr[r-1][c+1] and arr[r][c] == arr[r+1][c-1] and arr[r][c] == arr[r+2][c-2]
                            try: arr[r][c] == arr[r-2][c+2] and arr[r][c] == arr[r-1][c+1] and arr[r][c] == arr[r+1][c-1]
                            try: arr[r][c] == arr[r-1][c+1] and arr[r][c] == arr[r-2][c+2] and arr[r][c] == arr[r-3][c+3]





